generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Model de Endereço
model Endereco {
  id          Int     @id @default(autoincrement())
  cep         String
  estado      String
  cidade      String
  bairro      String
  rua         String
  numero      String
  complemento String?

  candidato Candidato?
  empresa   Empresa?
}

// Models dos Usuarios (Empresa e Candidato)
model Empresa {
  id                Int      @id @default(autoincrement())
  razaoSocial       String
  nomeFantasia      String?
  email             String   @unique
  senha             String
  cnpj              String   @unique
  telefoneComercial String
  numFunc           Int?
  numFuncPcd        Int?
  area              String
  site              String?
  descricao         String?
  historia          String?
  missao            String?
  valores           String?
  anoFundacao       Int?
  certificacoes     String[]

  arquivos        Arquivo[]

  enderecoId Int?      @unique
  endereco   Endereco? @relation(fields: [enderecoId], references: [id], onDelete: SetNull)

  empresaAcessibilidade EmpresaAcessibilidade[]
  vagas                 Vagas[]

  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
}

model Candidato {
  id             Int      @id @default(autoincrement())
  nome           String
  email          String   @unique
  senha          String
  cpf            String?  @unique
  dataNascimento DateTime
  sexo           String?
  genero         String?
  telefones      String[]
  areaInteresse  String

  enderecoId Int?      @unique
  endereco   Endereco? @relation(fields: [enderecoId], references: [id], onDelete: SetNull)

  formacoes    FormacaoOuCurso[]
  candidaturas Candidaturas[]
  subtipos     CandidatoSubtipo[]
  habilidades  String[]
  experiencia  Experiencias[]

  arquivos        Arquivo[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Models dos Tipos Deficiencia
model TipoDeficiencia {
  id       Int                  @id @default(autoincrement())
  nome     String               @unique
  subtipos SubtipoDeficiencia[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubtipoDeficiencia {
  id         Int                @id @default(autoincrement())
  nome       String
  tipoId     Int
  tipo       TipoDeficiencia    @relation(fields: [tipoId], references: [id], onDelete: Cascade)
  barreiras  SubtipoBarreira[]
  candidatos CandidatoSubtipo[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([tipoId, nome])
}

model CandidatoSubtipo {
  candidatoId Int
  subtipoId   Int
  candidato   Candidato          @relation(fields: [candidatoId], references: [id], onDelete: Cascade)
  subtipo     SubtipoDeficiencia @relation(fields: [subtipoId], references: [id], onDelete: Cascade)

  @@id([candidatoId, subtipoId])
}

// Models de Barreiras e Acessibilidades
model Barreira {
  id              Int                      @id @default(autoincrement())
  descricao       String                   @unique
  subtipos        SubtipoBarreira[]
  acessibilidades BarreiraAcessibilidade[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SubtipoBarreira {
  subtipoId  Int
  barreiraId Int
  subtipo    SubtipoDeficiencia @relation(fields: [subtipoId], references: [id], onDelete: Cascade)
  barreira   Barreira           @relation(fields: [barreiraId], references: [id], onDelete: Cascade)

  @@id([subtipoId, barreiraId])
  @@index([barreiraId])
}

model Acessibilidade {
  id        Int                      @id @default(autoincrement())
  nome      String                   @unique
  barreiras BarreiraAcessibilidade[]
  EmpresaAcessibilidade EmpresaAcessibilidade[]
  VagaAcessibilidade VagaAcessibilidade[]

  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
}

model BarreiraAcessibilidade {
  barreiraId       Int
  acessibilidadeId Int
  barreira         Barreira       @relation(fields: [barreiraId], references: [id], onDelete: Cascade)
  acessibilidade   Acessibilidade @relation(fields: [acessibilidadeId], references: [id], onDelete: Cascade)

  @@id([barreiraId, acessibilidadeId])
  @@index([acessibilidadeId])
}

// Models de Vagas e Candidaturas
model Vagas {
  id           Int      @id @default(autoincrement())
  titulo       String
  localizacao  String
  descricao    String
  habilidades  String[]
  apoios       String[]
  compatibilidade Float?
  dataInicio   DateTime
  dataFim      DateTime
  tipoContrato String
  tipoTrabalho String
  pagamento    String
  nivelTrabalho String
  turno        String
  status       String   @default("DISPONIVEL")
  setor        String?

  empresaId Int
  empresa   Empresa @relation(fields: [empresaId], references: [id], onDelete: Cascade)

  candidaturas Candidaturas[]
  vagaAcessibilidades VagaAcessibilidade[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Enum Status
enum StatusCandidaturas {
  PENDENTE
  APROVADO
  RECUSADO
}

model Candidaturas {
  id          Int       @id @default(autoincrement())
  candidatoId Int
  candidato   Candidato @relation(fields: [candidatoId], references: [id], onDelete: Cascade)
  mensagem    String?

  vagaId Int
  vaga   Vagas @relation(fields: [vagaId], references: [id], onDelete: Cascade)

  status StatusCandidaturas @default(PENDENTE)

  dataCandidatura DateTime @default(now())

  @@unique([candidatoId, vagaId])
}

// Model de Formações ou Cursos
model FormacaoOuCurso {
  id          Int       @id @default(autoincrement())
  candidatoId Int
  candidato   Candidato @relation(fields: [candidatoId], references: [id], onDelete: Cascade)

  nomeCurso    String
  tipoFormacao String
  instituicao  String
  situacao     String
  dataInicio   DateTime
  dataFim      DateTime
  descricao    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



// Model de Experiencias
model Experiencias {
  id          Int       @id @default(autoincrement())
  candidatoId Int
  candidato   Candidato @relation(fields: [candidatoId], references: [id], onDelete: Cascade)

  titulo       String
  instituicao  String
  dataInicio   DateTime
  dataFim      DateTime
  descricao    String?
  tipoContrato String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmpresaAcessibilidade {
  empresaId        Int
  acessibilidadeId Int

  empresa        Empresa        @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  acessibilidade Acessibilidade @relation(fields: [acessibilidadeId], references: [id], onDelete: Cascade)

  @@id([empresaId, acessibilidadeId])
  @@index([empresaId])
}

model VagaAcessibilidade {
  vagaId           Int
  acessibilidadeId Int

  vaga           Vagas          @relation(fields: [vagaId], references: [id], onDelete: Cascade)
  acessibilidade Acessibilidade @relation(fields: [acessibilidadeId], references: [id], onDelete: Cascade)

  @@id([vagaId, acessibilidadeId])
  @@index([vagaId])
}

model Arquivo {
  id        Int      @id @default(autoincrement())
  tipo      TipoArquivo
  filename  String
  mimetype  String
  filePath  String
  createdAt DateTime @default(now())

  candidato    Candidato?    @relation(fields: [candidatoId], references: [id])
  candidatoId  Int?

  empresa      Empresa?      @relation(fields: [empresaId], references: [id])
  empresaId    Int?
}

enum TipoArquivo {
  LAUDO
  CURRICULO
  FOTO
}